openapi: 3.1.1
info:
  title: Clase III · API Ejemplo
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /api/products:
    get:
      summary: Listar productos
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: sort
          schema: { type: string }
        - in: query
          name: categoryId
          schema: { type: string }
        - in: query
          name: minPrice
          schema: { type: number }
        - in: query
          name: maxPrice
          schema: { type: number }
        - in: query
          name: tags
          schema: { type: string, description: CSV de tags }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  page: { type: integer }
                  limit: { type: integer }
                  total: { type: integer }
                  totalPages: { type: integer }
    post:
      summary: Crear producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCreate"
      responses:
        "201":
          description: Creado
          headers:
            Location:
              description: URL del nuevo recurso
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
  /api/products/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string }
    get:
      summary: Obtener producto
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404": { description: Not Found }
    patch:
      summary: Actualizar parcialmente un producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductPatch"
      responses:
        "200": { description: OK }
        "404": { description: Not Found }
    put:
      summary: Reemplazar un producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCreate"
      responses:
        "200": { description: OK }
        "201": { description: Creado }
    delete:
      summary: Eliminar producto
      responses:
        "204": { description: No Content }
  /api/products/{id}/category:
    get:
      summary: Obtener categoría del producto
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404": { description: Not Found }
  /api/products/{id}/tags:
    get:
      summary: Listar tags del producto
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Tag" }
    post:
      summary: Vincular tag al producto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tagId: { type: string }
              required: [tagId]
      responses:
        "201": { description: Created }
  /api/products/{id}/tags/{tagId}:
    delete:
      summary: Desvincular tag del producto
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: path
          name: tagId
          required: true
          schema: { type: string }
      responses:
        "204": { description: No Content }
  /api/categories:
    get:
      summary: Listar categorías
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
  /api/categories/{id}:
    get:
      summary: Obtener categoría
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404": { description: Not Found }
  /api/categories/{id}/products:
    get:
      summary: Listar productos por categoría
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        "200": { description: OK }
  /api/tags:
    get:
      summary: Listar tags
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
  /api/tags/{id}:
    get:
      summary: Obtener tag
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "404": { description: Not Found }
  /api/payments:
    post:
      summary: Crear pago (idempotente)
      parameters:
        - in: header
          name: Idempotency-Key
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount: { type: number }
                currency: { type: string }
                orderId: { type: string }
              required: [amount, currency, orderId]
      responses:
        "201": { description: Created }
  /api/status:
    get:
      summary: Estado del sistema
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  time: { type: string, format: date-time }

components:
  schemas:
    Product:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        price: { type: number }
        currency: { type: string }
        categoryId: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
      required: [id, name, price, currency, createdAt]
    ProductCreate:
      type: object
      properties:
        name: { type: string }
        price: { type: number }
        currency: { type: string }
        categoryId: { type: string }
      required: [name, price, currency]
    ProductPatch:
      type: object
      properties:
        name: { type: string }
        price: { type: number }
        currency: { type: string }
        categoryId: { type: string }
    Category:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
      required: [id, name]
    Tag:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
      required: [id, name]
